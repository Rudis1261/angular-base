/// @type Map
$break-min: (
  'min': (min-width: 1px),
  'xs': (min-width: $screen-xs),
  'sm': (min-width: $screen-sm),
  'md': (min-width: $screen-md),
  'lg': (min-width: $screen-lg),
);

/// @type Map
$break-max: (
  'min': (min-width: 1px),
  'xs': (max-width: $screen-xs),
  'sm': (max-width: $screen-sm),
  'md': (max-width: $screen-md),
  'lg': (max-width: $screen-lg),
);

@mixin respond-from($breakpoint) {
  $media: map-get($break-min, $breakpoint);

  @if not $media {
    @error "No query could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$break-min` map.";
  }

  @media only #{inspect($media)} {
    @content;
  }
}

@mixin respond-to($breakpoint) {
  $media: map-get($break-max, $breakpoint);

  @if not $media {
    @error "No query could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$break-max` map.";
  }

  @media only #{inspect($media)} {
    @content;
  }
}

@mixin respond-between($from, $to) {
  $media-from: map-get($break-min, $from);
  $media-to: map-get($break-max, $to);

  @if not $media-from {
    @error "No query could be retrieved from `#{$from}`. "
    + "Please make sure it is defined in `$break-min` map.";
  }

  @if not $media-to {
    @error "No query could be retrieved from `#{$to}`. "
    + "Please make sure it is defined in `$break-max` map.";
  }

  @media only #{inspect($media-from)} and #{inspect($media-to)} {
    @content;
  }
}

@mixin border-radius($size) {
  -webkit-border-radius: $size;
  -moz-border-radius: $size;
  border-radius: $size;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}
